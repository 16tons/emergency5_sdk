// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf/plugin/pluginable/Pluginable.h"
#include "qsf/settings/ParameterGroupManager.h" // Required for inline constructor


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{


	//[-------------------------------------------------------]
	//[ Classes                                               ]
	//[-------------------------------------------------------]
	/**
	*  @brief
	*    Abstract parameter group class
	*/
	class QSF_API_EXPORT ParameterGroup : public Pluginable<ParameterGroupManager>
	{


	//[-------------------------------------------------------]
	//[ Public methods                                        ]
	//[-------------------------------------------------------]
	public:
		/**
		*  @brief
		*    Destructor
		*/
		inline virtual ~ParameterGroup();


	//[-------------------------------------------------------]
	//[ Protected methods                                     ]
	//[-------------------------------------------------------]
	protected:
		/**
		*  @brief
		*    Constructor
		*
		*  @param[in] parameterGroupManager
		*    The parameter group bar manager this parameter group instance is in, no null pointer allowed (the CAMP reflection system does not like references in constructors, so we have to use a pointer instead)
		*/
		explicit ParameterGroup(ParameterGroupManager* parameterGroupManager);

		/**
		*  @brief
		*    A component property value was changed
		*
		*  @param[in] propertyId
		*    Unique class property ID the component property which values was changed
		*
		*  @note
		*    - The unique class property identifier is generated by "qsf::StringHash" by using the class property name
		*      (e.g. qsf::StringHash("Position") generating the hash value 3091144222)
		*/
		void promotePropertyChange(uint32 propertyId);

		/**
		*  @brief
		*   Comfort function for updating an exported member variable and promoting any change that happened
		*
		*  @return
		*    "true" the value actually changed, "false" if the same value was already set
		*
		*  @remarks
		*    If variable is equal to newValue, nothing happens.
		*    Otherwise variable is assigned newValue and a property change for propertyId is promoted.
		*/
		template <typename T>
		bool assignAndPromoteChange(T& variable, const T& newValue, uint32 propertyId);


	//[-------------------------------------------------------]
	//[ CAMP reflection system                                ]
	//[-------------------------------------------------------]
	QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


	};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
} // qsf


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf/settings/ParameterGroup-inl.h"


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::ParameterGroup)
