// Copyright (C) 2012-2017 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf/base/StringHash.h"
#include "qsf/base/manager/Manager.h"
#include "qsf/asset/AssetSystemTypes.h"

#include <boost/container/flat_map.hpp>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace qsf
{
	class Asset;
	class Project;
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{


	//[-------------------------------------------------------]
	//[ Classes                                               ]
	//[-------------------------------------------------------]
	/**
	*  @brief
	*    Project manager
	*/
	class QSF_API_EXPORT ProjectManager : public Manager
	{


	//[-------------------------------------------------------]
	//[ Public definitions                                    ]
	//[-------------------------------------------------------]
	public:
		typedef std::vector<Project*>						 ProjectList;
		typedef boost::container::flat_map<uint32, Project*> ProjectMap;


	//[-------------------------------------------------------]
	//[ Public Boost signals                                  ]
	//[-------------------------------------------------------]
	public:
		boost::signals2::signal<void (Project&)> ProjectAdded;		///< This Boost signal is emitted after a project was added; parameter: reference to the new project
		boost::signals2::signal<void (Project&)> ProjectRemoval;	///< This Boost signal is emitted just before a project gets removed; parameter: reference to the project


	//[-------------------------------------------------------]
	//[ Public methods                                        ]
	//[-------------------------------------------------------]
	public:
		/**
		*  @brief
		*    Default constructor
		*/
		ProjectManager();

		/**
		*  @brief
		*    Destructor
		*/
		inline virtual ~ProjectManager();

		/**
		*  @brief
		*    Clear the project manager
		*/
		void clear();

		/**
		*  @brief
		*    Register a new empty project
		*
		*  @param[in] projectName
		*    UTF-8 project name (example: "my_project")
		*  @param[in] projectPath
		*    UTF-8 local project path to load the project from; this also serves as virtual directory name for the project (example: "data/my_project")
		*  @param[in] baseDirectory
		*    UTF-8 base directory path the project path is relative to; may be empty so that the application base directory is chosen as default (e.g. on Windows: "C:/MyApplication")
		*
		*  @return
		*    The created project instance, null pointer on error
		*/
		Project* createProject(const std::string& projectName, const std::string& projectPath, const std::string& baseDirectory = "");

		/**
		*  @brief
		*    Register the project based in the provided directory inside the project manager
		*
		*  @param[in] projectName
		*    UTF-8 project name (example: "my_project")
		*  @param[in] projectPath
		*    UTF-8 local project path to load the project from; this also serves as virtual directory name for the project (example: "data/my_project")
		*  @param[in] baseDirectory
		*    UTF-8 base directory path the project path is relative to; may be empty so that the application base directory is chosen as default (e.g. on Windows: "C:/MyApplication")
		*
		*  @return
		*    The created project instance, null pointer on error
		*/
		Project* registerSingleProjectFromFileSystem(const std::string& projectName, const std::string& projectPath, const std::string& baseDirectory = "");

		/**
		*  @brief
		*    Return the projects of this project manager
		*
		*  @return
		*    The internal list of projects of this project manager, do not destroy the instance
		*
		*  @note
		*    - The order of projects in this list does not reflect the actual order in which the projects were mounted.
		*/
		inline const ProjectList& getProjectList() const;

		/**
		*  @brief
		*    Return a project instance by using its unique identifier generated by using the project name
		*
		*  @param[in] stringHash
		*    The unique project identifier generated by "qsf::StringHash"
		*
		*  @return
		*    The requested project instance, null pointer on error
		*/
		inline Project* getProject(const StringHash& stringHash) const;

		/**
		*  @brief
		*    Destroy a project by using the project name
		*
		*  @param[in] stringHash
		*    The unique project identifier generated by "qsf::StringHash"
		*
		*  @return
		*    "true" if all went fine, else "false"
		*
		*  @note
		*    - The file system is not touched, meaning no deletion of directories nor files
		*/
		bool destroyProject(const StringHash& stringHash);

		/**
		*  @brief
		*    Unregister a project by using the project name
		*
		*  @param[in] stringHash
		*    The unique project identifier generated by "qsf::StringHash"
		*
		*  @return
		*    The project instance, you're now responsible for deleting the instance if you no longer need it, null pointer on error
		*
		*  @note
		*    - The file system is not touched, meaning no deletion of directories nor files
		*/
		Project* unregisterProject(const StringHash& stringHash);

		/**
		*  @brief
		*    Return the currently up-and-running projects of this project manager
		*
		*  @return
		*    A list of currently up-and-running projects of this project manager
		*
		*  @note
		*    - The order of projects in this list does not reflect the actual order in which the projects were mounted.
		*/
		ProjectList getRunningProjectsList() const;

		/**
		*  @brief
		*    Return the ID of the current project
		*
		*  @return
		*    The ID of the current project, "qsf::getUninitialized<uint32>()" if invalid (unique identifier generated by using the project name)
		*
		*  @note
		*    - There are a few situations were program parts might be interested in the "current" project, even if there are multiple projects up-and-running
		*/
		inline uint32 getCurrentProjectId() const;

		/**
		*  @brief
		*    Return the current project
		*
		*  @return
		*    The current project, or null pointer if invalid; do not destroy the returned instance
		*
		*  @note
		*    - There are a few situations were program parts might be interested in the "current" project, even if there are multiple projects up-and-running
		*/
		inline Project* getCurrentProject() const;

		/**
		*  @brief
		*    Set the ID of the current project
		*
		*  @param[in] id
		*    The ID of the current project, "qsf::getUninitialized<uint32>()" if invalid (unique identifier generated by using the project name)
		*
		*  @see
		*    - "qsf::ProjectManager::getCurrentProjectId()"
		*/
		inline void setCurrentProjectId(uint32 id);

		//[-------------------------------------------------------]
		//[ Asset utility methods                                 ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    Return the instance of an asset by using the given global asset ID
		*
		*  @param[in] globalAssetId
		*    The global asset ID of the asset to return
		*
		*  @return
		*    The asset instance, or null pointer if invalid; do not destroy the returned instance
		*
		*  @note
		*    - Checks inside all asset packages of all projects
		*/
		Asset* getAssetByGlobalAssetId(GlobalAssetId globalAssetId) const;


	//[-------------------------------------------------------]
	//[ Private data                                          ]
	//[-------------------------------------------------------]
	private:
		ProjectList mProjectList;		///< List of projects of this project manager
		ProjectMap  mProjectMap;		///< Project map with unique project identifier as key and pointer to the project as value
		uint32		mCurrentProjectId;	///< The ID of the current project, "qsf::getUninitialized<uint32>()" if invalid (unique identifier generated by using the project name)


	};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
} // qsf


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf/asset/project/ProjectManager-inl.h"
