// Copyright (C) 2012-2017 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf/Export.h"
#include "qsf/reflection/CampClass.h"

#include <boost/noncopyable.hpp>

#include <string>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace qsf
{
	class Script;
	class StringHash;
	class BinarySerializer;
}
namespace camp
{
	class Value;
	class Property;
	class Class;
}
namespace boost
{
	namespace property_tree
	{
		template <typename U, typename V, typename W>
		class basic_ptree;
		typedef basic_ptree<std::string, std::string, std::less<std::string> > ptree;
	}
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{


	//[-------------------------------------------------------]
	//[ Classes                                               ]
	//[-------------------------------------------------------]
	/**
	*  @brief
	*    Object base class
	*
	*  @remarks
	*    Whenever you need a common base class for CAMP class instances, use "qsf::Object" as common base class.
	*    This means that an object is an instance of a (CAMP meta-)class, which is a common terminology in the literature.
	*    There's no need to derive each and every class connected to the CAMP reflection system from the "qsf::Object"
	*    class. Since "qsf::Object" offers additional ease-us-use features like reseting properties to their default values,
	*    most of our classes, connected to the CAMP reflection system, are derived from "qsf::Object".
	*/
	class QSF_API_EXPORT Object : public boost::noncopyable
	{


	//[-------------------------------------------------------]
	//[ Public definitions                                    ]
	//[-------------------------------------------------------]
	public:
		enum PropertyOverrideState
		{
			PROPERTY_INVALID,	///< Property does not exist at all
			PROPERTY_DEFAULT,	///< Property uses an inherited or hard-coded default value
			PROPERTY_OVERRIDE,	///< Property uses a custom value overriding the default value; the value can be equal to the default nevertheless
			PROPERTY_REMOVED	///< Property is defined by the inherited default, but was explicitly removed in this instance
		};

		enum SerializationMethod
		{
			SERIALIZE_FLAT,				///< Serialize all serializable properties of the object, no matter if overridden or not; do not store the override state
			SERIALIZE_COMPLETE,			///< Serialize all serializable properties of the object, also store information about their override states
			SERIALIZE_DIFFERENTIAL,		///< Serialize only the overridden serializable properties of the object, ignore the others
			SERIALIZE_IGNORE_UNKNOWN	///< Like SERIALIZE_FLAT, but ignore unknown properties when deserializing
		};

		enum SerializationMode
		{
			MODE_MINIMAL,		///< "Minimal" serialization: only values, no property names and types, or other meta-data
			MODE_COMPATIBLE		///< "Compatible" serialization: also serialize property names and value types
		};


	//[-------------------------------------------------------]
	//[ Public methods                                        ]
	//[-------------------------------------------------------]
	public:
		/**
		*  @brief
		*    Destructor
		*/
		virtual ~Object();

		/**
		*  @brief
		*    Return the CAMP class
		*/
		const camp::Class& getCampClass() const;

		/**
		*  @brief
		*    Return the CAMP property index by using the unique class property ID
		*
		*  @param[in] propertyId
		*    Unique class property ID the CAMP property for which to return its index
		*
		*  @return
		*    CAMP property index, negative value on error
		*
		*  @note
		*    - The unique class property identifier is generated by "qsf::StringHash" by using the class property name
		*      (e.g. qsf::StringHash("Position") generating the hash value 3091144222)
		*    - Don't use this method in highly performance critical situations
		*/
		int getPropertyIndexById(const StringHash& propertyId) const;

		/**
		*  @brief
		*    Return the unique class property ID with the given index
		*
		*  @param[in] index
		*    Property index, negative value on error
		*
		*  @return
		*    Unique class property ID the CAMP property for which to return its index
		*
		*  @note
		*    - The unique class property identifier is generated by "qsf::StringHash" by using the class property name
		*      (e.g. qsf::StringHash("Position") generating the hash value 3091144222)
		*    - Don't use this method in highly performance critical situations
		*/
		uint32 getPropertyIdByIndex(int index) const;

		/**
		*  @brief
		*    Return the CAMP property name by using the unique class property ID
		*
		*  @param[in] propertyId
		*    Unique class property ID the CAMP property for which to return its name
		*
		*  @return
		*    CAMP property ASCII name, empty string on error
		*
		*  @see
		*    - "qsf::Object::getPropertyIndexById()"
		*/
		std::string getPropertyNameById(const StringHash& propertyId) const;

		/**
		*  @brief
		*    Return the CAMP property by using the unique class property ID
		*
		*  @param[in] propertyId
		*    Unique class property ID of the CAMP property to return
		*
		*  @return
		*    CAMP property, null pointer on error, do not destroy the instance
		*
		*  @see
		*    - "qsf::Object::getPropertyIndexById()"
		*/
		const camp::Property* getCampPropertyById(const StringHash& propertyId) const;

		/**
		*  @brief
		*    Set CAMP reflection property values by using a given string
		*
		*  @param[in] values
		*    UTF-8 property values to set (e.g. "Name=\"Alice\" Description=\"This is the test entity Alice\"")
		*
		*  @note
		*    - Don't use this generic method in highly performance critical situations
		*/
		void setPropertyValuesByString(const std::string& values);

		/**
		*  @brief
		*    Set all CAMP reflection system properties to their default values
		*
		*  @note
		*    - Don't use this method in highly performance critical situations
		*/
		void setPropertiesToDefaultValues();


		//[-------------------------------------------------------]
		//[ Serialization                                         ]
		//[-------------------------------------------------------]
		void serializeToBoostPTree(boost::property_tree::ptree& pTree, SerializationMethod serializationMethod = SERIALIZE_DIFFERENTIAL) const;
		void serializeToBoostPTree(boost::property_tree::ptree& pTree, const camp::Class& campClass, SerializationMethod serializationMethod = SERIALIZE_DIFFERENTIAL) const;
		bool deserializeFromBoostPTree(const boost::property_tree::ptree& pTree, SerializationMethod serializationMethod = SERIALIZE_DIFFERENTIAL);
		bool deserializeFromBoostPTree(const boost::property_tree::ptree& pTree, const camp::Class& campClass, SerializationMethod serializationMethod = SERIALIZE_DIFFERENTIAL);

		// Throws exceptions in case of an error
		void serializeToBinarySerializer(BinarySerializer& serializer, SerializationMode mode = MODE_MINIMAL, SerializationMethod serializationMethod = SERIALIZE_DIFFERENTIAL) const;
		void deserializeFromBinarySerializer(BinarySerializer& serializer, SerializationMode mode = MODE_MINIMAL, SerializationMethod serializationMethod = SERIALIZE_DIFFERENTIAL, bool setOverrideState = true);


	//[-------------------------------------------------------]
	//[ Public virtual qsf::Object methods                    ]
	//[-------------------------------------------------------]
	public:
		//[-------------------------------------------------------]
		//[ Property                                              ]
		//[-------------------------------------------------------]
		virtual camp::Value getPropertyDefaultValue(const StringHash& propertyId) const;
		virtual PropertyOverrideState getPropertyOverrideState(const StringHash& propertyId) const;
		virtual bool setPropertyOverrideState(const StringHash& propertyId, PropertyOverrideState overrideState);

		//[-------------------------------------------------------]
		//[ Serialization                                         ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    Called right before the object is deserialized using any of the above methods. Default implementation is empty.
		*/
		virtual inline void onPreDeserialize();

		/**
		*  @brief
		*    Called right after the object was deserialized using any of the above methods. Default implementation is empty.
		*/
		virtual inline void onPostDeserialize();

		//[-------------------------------------------------------]
		//[ Script                                                ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    Return the script instance associated with this object instance
		*
		*  @return
		*    The script instance associated with this object instance, can be a null pointer, do not destroy the instance
		*
		*  @note
		*    - The default implementation is empty and always returns a null pointer
		*/
		virtual Script* getAssociatedScript() const;


	//[-------------------------------------------------------]
	//[ Protected methods                                     ]
	//[-------------------------------------------------------]
	protected:
		/**
		*  @brief
		*    Default constructor
		*
		*  @note
		*    - There's no point in creating an instance of this base class
		*/
		inline Object();


	//[-------------------------------------------------------]
	//[ Private data                                          ]
	//[-------------------------------------------------------]
	private:
		mutable const camp::Class* mCampClass;


	//[-------------------------------------------------------]
	//[ CAMP reflection system                                ]
	//[-------------------------------------------------------]
	QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


	};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
} // qsf


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf/reflection/object/Object-inl.h"


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::Object)
QSF_CAMP_TYPE_NONCOPYABLE(qsf::Object::PropertyOverrideState)
