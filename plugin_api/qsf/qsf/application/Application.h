// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf/reflection/object/Object.h"

#include <vector>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace boost
{
	namespace property_tree
	{
		template <typename U, typename V, typename W>
		class basic_ptree;
		typedef basic_ptree<std::string, std::string, std::less<std::string> > ptree;
	}
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{


	//[-------------------------------------------------------]
	//[ Classes                                               ]
	//[-------------------------------------------------------]
	/**
	*  @brief
	*    Abstract application interface
	*
	*  @remarks
	*    Application lifecycle:
	*    - "onStartup()"
	*    - "run()"
	*    - "onShutdown()"
	*
	*    Each application class connected to the CAMP reflection system should have the following tags:
	*    - "OrganizationName":   Human readable organization name (type: "std::string" with UTF-8 encoding, example: "Promotion Software GmbH")
	*    - "OrganizationDomain": Organization domain (type: "std::string" with UTF-8 encoding, example: "promotion-software.de")
	*    - See "qsf::ClassSystem"-documentation for more tags
	*
	*  @note
	*    - Keep the constructor/destructor implementation lightweight and do the heavy work within "onStartup()"/"onShutdown()"
	*/
	class QSF_API_EXPORT Application : public Object
	{


	//[-------------------------------------------------------]
	//[ Friends                                               ]
	//[-------------------------------------------------------]
		friend class Qsf;


	//[-------------------------------------------------------]
	//[ Public methods                                        ]
	//[-------------------------------------------------------]
	public:
		/**
		*  @brief
		*    Destructor
		*/
		inline virtual ~Application();

		/**
		*  @brief
		*    Return the program options array
		*
		*  @return
		*    List of UTF-8 program options, the first entry is always the absolute executable filename
		*/
		inline const std::vector<std::string>& getProgramOptions() const;

		/**
		*  @brief
		*    Return the application parameters
		*
		*  @return
		*    Application-specific parameters as a generic Boost property tree
		*/
		inline const boost::property_tree::ptree& getParametersPTree() const;


	//[-------------------------------------------------------]
	//[ Public virtual qsf::Application methods               ]
	//[-------------------------------------------------------]
	public:
		/**
		*  @brief
		*    Ask the application politely to shut down as soon as possible
		*/
		virtual void exit() = 0;

		/**
		*  @brief
		*    Return the unique application identifier
		*
		*  @return
		*    The unique application identifier
		*
		*  @note
		*    - The unique application identifier is generated by "qsf::StringHash" by using the class name
		*      (e.g. qsf::StringHash("qsf::MetadataComponent") generating the hash value 483975945)
		*/
		virtual uint32 getId() = 0;


	//[-------------------------------------------------------]
	//[ Protected virtual qsf::Application methods            ]
	//[-------------------------------------------------------]
	protected:
		//[-------------------------------------------------------]
		//[ Lifecycle                                             ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    Startup the application
		*
		*  @return
		*    "true" if all went fine, else "false"
		*/
		virtual bool onStartup() = 0;

		/**
		*  @brief
		*    Run the application
		*
		*  @return
		*    Exit code of the application (usually 0 means no error)
		*
		*  @note
		*    - Only called in case "onStartup()" returned successfully
		*/
		virtual int onRun() = 0;

		/**
		*  @brief
		*    Shutdown the application
		*
		*  @note
		*    - Only called in case "onStartup()" returned successfully
		*/
		virtual void onShutdown() = 0;


	//[-------------------------------------------------------]
	//[ Protected methods                                     ]
	//[-------------------------------------------------------]
	protected:
		/**
		*  @brief
		*    Default constructor
		*/
		inline Application();

		/**
		*  @brief
		*    Initialization call after construction
		*/
		inline void initializeOptionsAndParameters(const std::vector<std::string>& programOptions, const boost::property_tree::ptree& parametersPTree);


	//[-------------------------------------------------------]
	//[ Private members                                       ]
	//[-------------------------------------------------------]
	private:
		const std::vector<std::string>*	   mProgramOptions;		///< List of UTF-8 program options, the first entry is always the absolute executable filename; always valid after initialization, do not destroy
		const boost::property_tree::ptree* mParametersPTree;	///< Application-specific parameters as a generic Boost property tree; always valid after initialization, do not destroy


	//[-------------------------------------------------------]
	//[ CAMP reflection system                                ]
	//[-------------------------------------------------------]
	QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


	};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
} // qsf


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf/application/Application-inl.h"


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::Application)
