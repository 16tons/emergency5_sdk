// Copyright (C) 2012-2017 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_editor/tool/ToolManager.h"

#include <qsf/base/StringHash.h>
#include <qsf/plugin/pluginable/Pluginable.h>

#include <QtCore/qnamespace.h>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
QT_BEGIN_NAMESPACE
	class QSettings;
QT_END_NAMESPACE
namespace qsf
{
	namespace editor
	{
		class EditMode;
		class MainWindow;
		class Application;
		class ToolboxView;
	}
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{


		//[-------------------------------------------------------]
		//[ Classes                                               ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    Abstract tool class
		*
		*  @remarks
		*    Tool lifecycle:
		*    - "onStartup()"
		*    - Can optionally be called multiple times during the lifetime: "retranslateUi()"
		*    - "onShutdown()"
		*
		*    Each tool connected to the CAMP reflection system should have the following tags:
		*    - "ShowQAction": "true" if this tool should have an automatic Qt action which is used e.g. inside the menu bar, default is "true"
		*    - "OnlineOnly":  "true" if this tool should only have an automatic Qt action which is used e.g. inside the menu bar if the online editor is used, default is "false"
		*    - "Shortcut":    Shortcut to show an instance of this tool, e.g. "F1" (type: "std::string" with UTF-8 encoding)
		*
		*  @note
		*    - A "tool" is not the same as an "edit mode", a tool can use 0..n edit modes and is more GUI orientated
		*    - The tool base class offers its derived tool classes a mirrored "qsf::editor::EditModeManager" edit mode interface because most edit modes are enabled/disabled by a tool
		*/
		class QSF_EDITOR_API_EXPORT Tool : public Pluginable<ToolManager>
		{


		//[-------------------------------------------------------]
		//[ Friends                                               ]
		//[-------------------------------------------------------]
		friend class ToolManager;
		friend class ToolboxView;


		//[-------------------------------------------------------]
		//[ Public methods                                        ]
		//[-------------------------------------------------------]
		public:
			/**
			*  @brief
			*    Destructor
			*/
			inline virtual ~Tool();

			/**
			*  @brief
			*    Return the QSF editor application
			*
			*  @return
			*    The QSF editor application, do no destroy the returned instance
			*
			*  @note
			*    - Ease-of-use method
			*/
			Application& getApplication() const;

			/**
			*  @brief
			*    Return the main window
			*
			*  @return
			*    The main window, do no destroy the returned instance
			*
			*  @note
			*    - Ease-of-use method
			*/
			MainWindow& getMainWindow() const;


		//[-------------------------------------------------------]
		//[ Protected methods                                     ]
		//[-------------------------------------------------------]
		protected:
			//[-------------------------------------------------------]
			//[ qsf::editor::EditModeManager edit mode interface      ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    Return the currently selected edit mode
			*
			*  @return
			*    The currently selected edit mode, can be a null pointer, do not destroy the instance
			*/
			EditMode* getSelectedEditMode() const;

			/**
			*  @brief
			*    Select the requested edit mode instance by using its unique identifier
			*
			*  @param[in] id
			*    The unique edit mode identifier generated by "qsf::StringHash"
			*/
			void selectEditModeById(const StringHash& id);

			/**
			*  @brief
			*    Select the requested edit mode instance by using a given edit mode pointer
			*
			*  @param[in] editMode
			*    Edit mode to select, can be a null pointer
			*/
			void selectEditModeByPointer(EditMode* editMode);

			/**
			*  @brief
			*    Return the edit mode which was selected before the currently selected edit mode got selected
			*
			*  @return
			*    The edit mode which was selected before the currently selected edit mode got selected, can be a null pointer, do not destroy the instance
			*/
			EditMode* getPreviousEditMode() const;


		//[-------------------------------------------------------]
		//[ Protected virtual qsf::editor::Tool methods           ]
		//[-------------------------------------------------------]
		protected:
			/**
			*  @brief
			*    Read settings by using Qt's "QSettings"
			*
			*  @param[in] qSettings
			*    Qt settings instance to use
			*
			*  @note
			*    - The default implementation is empty
			*/
			inline virtual void readSettings(QSettings& qSettings);

			/**
			*  @brief
			*    Write settings by using Qt's "QSettings"
			*
			*  @param[in] qSettings
			*    Qt settings instance to use
			*
			*  @note
			*    - The default implementation is empty
			*/
			inline virtual void writeSettings(QSettings& qSettings);

			//[-------------------------------------------------------]
			//[ Lifecycle                                             ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    Startup the tool
			*
			*  @param[in] toolboxView
			*    Owner toolbox view
			*
			*  @return
			*    "true" if all went fine, else "false"
			*
			*  @note
			*    - The default implementation is empty
			*/
			inline virtual bool onStartup(ToolboxView& toolboxView);

			/**
			*  @brief
			*    Retranslate the UI
			*
			*  @param[in] toolboxView
			*    Owner toolbox view
			*
			*  @note
			*    - The default implementation is empty
			*    - Only called by "qsf::editor::ToolboxView::retranslateUi()", so it's ensured that only the
			*      currently active and hence properly initialized tool receives the changed event
			*/
			inline virtual void retranslateUi(ToolboxView& toolboxView);

			/**
			*  @brief
			*    Shutdown the tool
			*
			*  @param[in] toolboxView
			*    Owner toolbox view
			*
			*  @note
			*    - Only called in case "onStartup()" returned successfully
			*
			*  @note
			*    - The default implementation is empty
			*/
			inline virtual void onShutdown(ToolboxView& toolboxView);


		//[-------------------------------------------------------]
		//[ Protected methods                                     ]
		//[-------------------------------------------------------]
		protected:
			/**
			*  @brief
			*    Constructor
			*
			*  @param[in] toolManager
			*    The tool manager this tool instance is in, no null pointer allowed (the CAMP reflection system does not like references in constructors, so we have to use a pointer instead)
			*/
			explicit Tool(ToolManager* toolManager);


		//[-------------------------------------------------------]
		//[ CAMP reflection system                                ]
		//[-------------------------------------------------------]
		QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


		};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
	} // editor
} // qsf


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf_editor/tool/Tool-inl.h"


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::editor::Tool)
