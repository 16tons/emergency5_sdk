// Copyright (C) 2012-2017 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_editor/dialog/Dialog.h"


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace Ui
{
	class MapPropertiesDialog;
}
namespace qsf
{
	class Component;
	class BoostSignalComponent;
	class ParameterGroup;
	namespace editor
	{
		namespace base
		{
			class Operation;
		}
	}
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{


		//[-------------------------------------------------------]
		//[ Classes                                               ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    QSF editor map properties dialog
		*/
		class MapPropertiesDialog : public Dialog
		{


		//[-------------------------------------------------------]
		//[ Qt definitions (MOC)                                  ]
		//[-------------------------------------------------------]
		Q_OBJECT	// All files using the Q_OBJECT macro need to be compiled using the Meta-Object Compiler (MOC) of Qt, else slots won't work!
					// (VisualStudio: Header file -> Right click -> Properties -> "Custom Build Tool")


		//[-------------------------------------------------------]
		//[ Public definitions                                    ]
		//[-------------------------------------------------------]
		public:
			static const uint32 PLUGINABLE_ID;	///< "qsf::editor::MapPropertiesDialog" unique pluginable dialog ID


		//[-------------------------------------------------------]
		//[ Public methods                                        ]
		//[-------------------------------------------------------]
		public:
			/**
			*  @brief
			*    Constructor
			*
			*  @param[in] dialogManager
			*    The dialog manager this dialog instance is in, no null pointer allowed (the CAMP reflection system does not like references in constructors, so we have to use a pointer instead)
			*  @param[in] qWidgetParent
			*    Pointer to parent Qt widget, can be a null pointer (in this case you're responsible for destroying this dialog instance)
			*/
			MapPropertiesDialog(DialogManager* dialogManager, QWidget* qWidgetParent);

			/**
			*  @brief
			*    Destructor
			*/
			virtual ~MapPropertiesDialog();


		//[-------------------------------------------------------]
		//[ Protected virtual qsf::editor::Dialog methods         ]
		//[-------------------------------------------------------]
		protected:
			virtual void retranslateUi() override;
			virtual bool preChangeVisibility(bool visible) override;
			virtual void changeVisibility(bool visible) override;


		//[-------------------------------------------------------]
		//[ Private methods                                       ]
		//[-------------------------------------------------------]
		private:
			/**
			*  @brief
			*    Create the tabs
			*/
			void createTabs() const;

			/**
			*  @brief
			*    Destroy the tabs
			*/
			void destroyTabs() const;

			/**
			*  @brief
			*    Get "qsf::BoostSignalComponent" instance
			*
			*  @return
			*    "qsf::BoostSignalComponent" instance, can be a null pointer, do not destroy the returned instance
			*/
			BoostSignalComponent* getBoostSignal() const;

			/**
			*  @brief
			*    Called in case a component property value was changed
			*
			*  @param[in] component
			*    Component instance which had a property value change
			*  @param[in] propertyId
			*    Unique class property ID the component property which values was changed
			*
			*  @note
			*    - The unique class property identifier is generated by "qsf::StringHash" by using the class property name
			*      (e.g. qsf::StringHash("Position") generating the hash value 3091144222)
			*/
			void onComponentPropertyChange(const Component& component, uint32 propertyId) const;

			/**
			*  @brief
			*    Called as soon as there's a property change inside the settings group manager
			*
			*  @param[in] parameterGroup
			*    Parameter group instance the changed property is in
			*  @param[in] propertyId
			*    Unique class property ID the component property which values was changed
			*/
			void onSettingsGroupPropertyChanged(const ParameterGroup& parameterGroup, uint32 propertyId);

			/**
			*  @brief
			*    Execute component operation
			*
			*  @param[in] sourceComponentId
			*    ID of the component to operate on, uninitialized when creating a new component
			*  @param[in] operationType
			*    Type of the operation which should be performed, "qsf::editor::CreateComponentDialog::OperationType" not used to keep the header slim
			*/
			void executeComponentOperation(uint32 sourceComponentId, uint32 operationType);


		//[-------------------------------------------------------]
		//[ Private Qt slots (MOC)                                ]
		//[-------------------------------------------------------]
		private Q_SLOTS:
			void onCurrentChanged(int index) const;
			void onCustomContextMenuRequestedTabWidget(const QPoint& qPoint);
			void onEditingFinishedMapName();
			void onClickedOk();
			void onClickedMiniMap();
			void onClickedGenerateMiniMap();
			void onClickedTimeOfDay();
			void onClickedWeather();
			void onTriggeredCreateComponent();
			void onTriggeredDeleteComponent();
			void onTriggeredMorphComponent();
			// qsf::editor::OperationManager
			void onUndoOperationExecuted(const base::Operation& operation);
			void onRedoOperationExecuted(const base::Operation& operation);


		//[-------------------------------------------------------]
		//[ Private data                                          ]
		//[-------------------------------------------------------]
		private:
			Ui::MapPropertiesDialog* mUiMapPropertiesDialog;	///< UI map properties dialog instance, can be a null pointer, we have to destroy the instance in case we no longer need it


		//[-------------------------------------------------------]
		//[ CAMP reflection system                                ]
		//[-------------------------------------------------------]
		QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


		};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
	} // editor
} // qsf


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::editor::MapPropertiesDialog)
