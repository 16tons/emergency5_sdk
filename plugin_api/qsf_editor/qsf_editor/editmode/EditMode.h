// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_editor/editmode/EditModeManager.h"

#include <qsf/base/StringHash.h>	// No forward declaration by intent
#include <qsf/plugin/pluginable/Pluginable.h>

#include <QtCore/qobject.h>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
QT_BEGIN_NAMESPACE
	class QEvent;
	class QSettings;
	class QDropEvent;
	class QFocusEvent;
	class QMouseEvent;
	class QKeyEvent;
	class QDragMoveEvent;
	class QDragEnterEvent;
	class QDragLeaveEvent;
QT_END_NAMESPACE
namespace qsf
{
	namespace editor
	{
		class RenderView;
		class MainWindow;
		class Application;
	}
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{


		//[-------------------------------------------------------]
		//[ Classes                                               ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    Abstract edit mode class
		*
		*  @remarks
		*    Edit mode lifecycle:
		*    - "onStartup()"
		*    - "onShutdown()"
		*
		*    Each edit mode connected to the CAMP reflection system should have the following tags:
		*    - "Shortcut": Shortcut to show an instance of this edit mode, e.g. "F1" (type: "std::string" with UTF-8 encoding)
		*
		*  @note
		*    - A "tool" is not the same as an "edit mode", a tool can use 0..n edit modes and is more GUI orientated
		*    - The edit mode is primarily interesting for the render view
		*/
		class QSF_EDITOR_API_EXPORT EditMode : public Pluginable<EditModeManager>, public QObject
		{


		//[-------------------------------------------------------]
		//[ Friends                                               ]
		//[-------------------------------------------------------]
		friend class EditModeManager;


		//[-------------------------------------------------------]
		//[ Public methods                                        ]
		//[-------------------------------------------------------]
		public:
			/**
			*  @brief
			*    Destructor
			*/
			inline virtual ~EditMode();

			/**
			*  @brief
			*    Return the QSF editor application
			*
			*  @return
			*    The QSF editor application, do no destroy the returned instance
			*
			*  @note
			*    - Ease-of-use method
			*/
			Application& getApplication() const;

			/**
			*  @brief
			*    Return the main window
			*
			*  @return
			*    The main window, do no destroy the returned instance
			*
			*  @note
			*    - Ease-of-use method
			*/
			MainWindow& getMainWindow() const;

			/**
			*  @brief
			*    Return the render view
			*
			*  @return
			*    The render view, do no destroy the returned instance
			*
			*  @note
			*    - Ease-of-use method
			*/
			RenderView& getRenderView() const;

			/**
			*  @brief
			*    Return whether or not the edit mode is up-and-running
			*
			*  @return
			*    "true" if the edit mode is up-and-running ("onStartup()" was called successfully), else "false"
			*/
			bool isRunning() const;

			//[-------------------------------------------------------]
			//[ Switch edit mode                                      ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    Switch to an edit mode instance by using its unique identifier
			*
			*  @param[in] id
			*    The unique edit mode identifier generated by "qsf::StringHash"
			*
			*  @note
			*    - For security reasons, don't use the previous edit mode anymore after switching to a new one
			*    - The tool which selected the currently selected edit mode will be kept
			*/
			void switchToEditModeById(const StringHash& id) const;

			/**
			*  @brief
			*    Switch back to the edit mode which was selected before the currently selected edit mode got selected
			*
			*  @note
			*    - For security reasons, don't use the previous edit mode anymore after switching to a new one
			*    - The tool which selected the currently selected edit mode will be kept
			*/
			void switchToPreviousEditMode();


		//[-------------------------------------------------------]
		//[ Public virtual QObject methods                        ]
		//[-------------------------------------------------------]
		public:
			virtual bool eventFilter(QObject* qObject, QEvent* qEvent) override;


		//[-------------------------------------------------------]
		//[ Protected virtual qsf::editor::EditMode methods       ]
		//[-------------------------------------------------------]
		protected:
			/**
			*  @brief
			*    Read settings by using Qt's "QSettings"
			*
			*  @param[in] qSettings
			*    Qt settings instance to use
			*
			*  @note
			*    - The default implementation is empty
			*/
			inline virtual void readSettings(QSettings& qSettings);

			/**
			*  @brief
			*    Write settings by using Qt's "QSettings"
			*
			*  @param[in] qSettings
			*    Qt settings instance to use
			*
			*  @note
			*    - The default implementation is empty
			*/
			inline virtual void writeSettings(QSettings& qSettings);

			//[-------------------------------------------------------]
			//[ Lifecycle                                             ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    Startup the edit mode
			*
			*  @param[in] previousEditMode
			*    Previous edit mode, can be a null pointer
			*
			*  @return
			*    "true" if all went fine, else "false"
			*
			*  @remarks
			*    The implementation does the following tasks:
			*    - Install event filter on the Qt render view of the main window
			*/
			virtual bool onStartup(EditMode* previousEditMode);

			/**
			*  @brief
			*    Shutdown the edit mode
			*
			*  @param[in] nextEditMode
			*    Next edit mode, can be a null pointer
			*
			*  @remarks
			*    The implementation does the following tasks:
			*    - Remove event filter on the Qt render view of the main window
			*
			*  @note
			*    - Only called in case "onStartup()" returned successfully
			*/
			virtual void onShutdown(EditMode* nextEditMode);

			//[-------------------------------------------------------]
			//[ Emulated QWidget methods for ease-of-use              ]
			//[-------------------------------------------------------]
			inline virtual void mousePressEvent(QMouseEvent& qMouseEvent);
			inline virtual void mouseReleaseEvent(QMouseEvent& qMouseEvent);
			inline virtual void mouseButtonDblClick(QMouseEvent& qMouseEvent);
			inline virtual void mouseMoveEvent(QMouseEvent& qMouseEvent);
			inline virtual void enterEvent(QEvent& qEvent);
			inline virtual void leaveEvent(QEvent& qEvent);
			inline virtual void keyPressEvent(QKeyEvent& qEvent);
			inline virtual void keyReleaseEvent(QKeyEvent& qEvent);
			inline virtual void focusInEvent(QFocusEvent& qFocusEvent);
			inline virtual void focusOutEvent(QFocusEvent& qFocusEvent);
			inline virtual void dragEnterEvent(QDragEnterEvent& qDragEnterEvent);
			inline virtual void dragMoveEvent(QDragMoveEvent& qDragMoveEvent);
			inline virtual void dragLeaveEvent(QDragLeaveEvent& qDragLeaveEvent);
			inline virtual void dropEvent(QDropEvent& qDropEvent);


		//[-------------------------------------------------------]
		//[ Protected methods                                     ]
		//[-------------------------------------------------------]
		protected:
			/**
			*  @brief
			*    Constructor
			*
			*  @param[in] editModeManager
			*    The edit mode manager this edit mode instance is in, no null pointer allowed (the CAMP reflection system does not like references in constructors, so we have to use a pointer instead)
			*/
			explicit EditMode(EditModeManager* editModeManager);


		//[-------------------------------------------------------]
		//[ CAMP reflection system                                ]
		//[-------------------------------------------------------]
		QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


		};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
	} // editor
} // qsf


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf_editor/editmode/EditMode-inl.h"


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::editor::EditMode)
