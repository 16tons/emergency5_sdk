// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_editor_base/user/UserBase.h"

#include <qsf/base/StringHash.h>

#include <boost/signals2.hpp>

#include <vector>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{
		namespace base
		{
			class UserManager;
		}
	}
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{
		namespace base
		{


			//[-------------------------------------------------------]
			//[ Classes                                               ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    User class
			*/
			class QSF_EDITOR_BASE_API_EXPORT User : public UserBase
			{


			//[-------------------------------------------------------]
			//[ Friends                                               ]
			//[-------------------------------------------------------]
				friend class UserManager;	// Only the user manager is allowed to create user instances


			//[-------------------------------------------------------]
			//[ Public Boost signals                                  ]
			//[-------------------------------------------------------]
			public:
				boost::signals2::signal<void ()> RightsChange;	///< Boost signal emitted after an user rights change has occurred


			//[-------------------------------------------------------]
			//[ Public methods                                        ]
			//[-------------------------------------------------------]
			public:
				/**
				*  @brief
				*    Destructor
				*/
				inline virtual ~User();

				/**
				*  @brief
				*    Return the user manager responsible for this user
				*
				*  @return
				*    The user manager responsible for this user, do not destroy the instance
				*/
				inline UserManager& getUserManager() const;

				/**
				*  @brief
				*    Return whether or not the user is remotely managed
				*
				*  @return
				*    "true" if the user is remotely managed, else "false"
				*
				*  @note
				*    - The information is stored inside the user tags
				*/
				bool isRemotelyManaged() const;

				/**
				*  @brief
				*    Set whether or not the user is remotely managed
				*
				*  @param[in] remotelyManaged
				*    "true" if the user is remotely managed, else "false"
				*
				*  @see
				*    - "qsf::editor::User::isRemotelyManaged()"
				*/
				void setRemotelyManaged(bool remotelyManaged);

				//[-------------------------------------------------------]
				//[ Properties                                            ]
				//[-------------------------------------------------------]
				/**
				*  @brief
				*    Return the unique user identifier
				*
				*  @return
				*    The unique user identifier
				*
				*  @note
				*    - Connected to the CAMP reflection system
				*/
				inline uint32 getId() const;

				/**
				*  @brief
				*    Return the session ID
				*
				*  @return
				*    The session ID, uninitialized value if there's no session ID
				*/
				inline uint32 getSessionId() const;

				/**
				*  @brief
				*    Set the session ID
				*
				*  @param[in] sessionId
				*    The session ID, uninitialized value if there's no session ID
				*/
				inline void setSessionId(uint32 sessionId);

				//[-------------------------------------------------------]
				//[ Rights                                                ]
				//[-------------------------------------------------------]
				/**
				*  @brief
				*    Check whether or not the user has a requested right
				*
				*  @param[in] id
				*    The unique right identifier generated by "qsf::StringHash"
				*
				*  @return
				*    "true" if the user has the requested right, else "false"
				*/
				inline bool hasRight(const StringHash& id) const;

				/**
				*  @brief
				*    Add a right to the user
				*
				*  @param[in] id
				*    The unique right identifier generated by "qsf::StringHash"
				*/
				void addRight(const StringHash& id);

				/**
				*  @brief
				*    Remove a right from the user
				*
				*  @param[in] id
				*    The unique right identifier generated by "qsf::StringHash"
				*/
				void removeRight(const StringHash& id);


			//[-------------------------------------------------------]
			//[ Protected virtual qsf::editor::base::UserBase methods ]
			//[-------------------------------------------------------]
			protected:
				virtual void setRightsImpl(const std::string& rights) override;


			//[-------------------------------------------------------]
			//[ Private methods                                       ]
			//[-------------------------------------------------------]
			private:
				/**
				*  @brief
				*    Constructor
				*
				*  @param[in] id
				*    The unique user identifier
				*  @param[in] userManager
				*    User manager, must stay valid as long as this user instance exists
				*/
				inline User(uint32 id, UserManager& userManager);


			//[-------------------------------------------------------]
			//[ Private data                                          ]
			//[-------------------------------------------------------]
			private:
				// Connected to the CAMP reflection system
				uint32 mId;	///< Unique user identifier
				// Internal
				UserManager*		mUserManager;	///< User manager, must stay valid as long as this user instance exists, do not destroy the instance
				std::vector<uint32> mRightIds;		///< User right IDs
				uint32				mSessionId;		///< Session ID


			//[-------------------------------------------------------]
			//[ CAMP reflection system                                ]
			//[-------------------------------------------------------]
			QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


			};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
		} // base
	} // editor
} // qsf


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf_editor_base/user/User-inl.h"


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::editor::base::User)
