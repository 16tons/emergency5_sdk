// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_editor_base/operation/component/ComponentOperation.h"

#include <camp/value.hpp>

#include <boost/property_tree/ptree.hpp>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace camp
{
	class Property;
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{
		namespace base
		{


			//[-------------------------------------------------------]
			//[ Classes                                               ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    Set entity component property operation class
			*
			*  @note
			*    - The unique class property identifier is generated by "qsf::StringHash" by using the class property name
			*      (e.g. qsf::StringHash("Position") generating the hash value 3091144222)
			*    - 128 bit are required to uniquely identify the property (entity -> component -> property)
			*/
			class QSF_EDITOR_BASE_API_EXPORT SetComponentPropertyOperation : public ComponentOperation
			{


			//[-------------------------------------------------------]
			//[ Public definitions                                    ]
			//[-------------------------------------------------------]
			public:
				static const uint32 OPERATION_ID;	///< "qsf::editor::base::SetComponentPropertyOperation" unique operation ID


			//[-------------------------------------------------------]
			//[ Public methods                                        ]
			//[-------------------------------------------------------]
			public:
				SetComponentPropertyOperation();

				/**
				*  @brief
				*    Constructor
				*
				*  @param[in] component
				*    Reference to the component the changed property is in
				*  @param[in] propertyId
				*    Unique (inside the entity component) class property ID the CAMP property to manipulate
				*  @param[in] newCampValue
				*    New CAMP value to set
				*  @param[in] previousCampValue
				*    Optional previous CAMP value to set, if null pointer the current property value will be used
				*  @param[in] overrideState
				*    Optional property override state to set; the value Object::PROPERTY_INVALID will leave the property's old override state untouched
				*/
				SetComponentPropertyOperation(const Component& component, uint32 propertyId, const camp::Value& newCampValue, const camp::Value* previousCampValue = nullptr, PropertyOverrideState overrideState = PROPERTY_OVERRIDE);

				/**
				*  @brief
				*    Constructor
				*
				*  @param[in] entityId
				*    The unique entity identifier
				*  @param[in] componentId
				*    The unique (inside the entity) component identifier
				*  @param[in] propertyId
				*    Unique (inside the entity component) class property ID the CAMP property to manipulate
				*  @param[in] newCampValue
				*    New CAMP value to set
				*  @param[in] previousCampValue
				*    Optional previous CAMP value to set, if null pointer the current property value will be used
				*/
				SetComponentPropertyOperation(uint64 entityId, uint32 componentId, uint32 propertyId, const camp::Value& newCampValue, const camp::Value* previousCampValue = nullptr);

				/**
				*  @brief
				*    Constructor
				*
				*  @param[in] component
				*    Reference to the component the changed property is in
				*  @param[in] propertyId
				*    Unique (inside the entity component) class property ID the CAMP property to manipulate
				*  @param[in] newValuePTree
				*    The new value in the form of a Boost property tree; must not contain a container for the value, but only the value itself
				*  @param[in] previousValuePTree
				*    Optional previous value to set, if null pointer the current property value will be used
				*/
				SetComponentPropertyOperation(const Component& component, uint32 propertyId, const boost::property_tree::ptree& newValuePTree, const boost::property_tree::ptree* previousValuePTree = nullptr);

				/**
				*  @brief
				*    Constructor
				*
				*  @param[in] entityId
				*    The unique entity identifier
				*  @param[in] componentId
				*    The unique (inside the entity) component identifier
				*  @param[in] newValuePTree
				*    The new value in the form of a Boost property tree; must not contain a container for the value, but only the value itself
				*  @param[in] previousValuePTree
				*    Optional previous value to set, if null pointer the current property value will be used
				*/
				SetComponentPropertyOperation(uint64 entityId, uint32 componentId, uint32 propertyId, const boost::property_tree::ptree& newValuePTree, const boost::property_tree::ptree* previousValuePTree = nullptr);

				/**
				*  @brief
				*    Destructor
				*/
				virtual ~SetComponentPropertyOperation();

				/**
				*  @brief
				*    Return the unique class property ID the CAMP property to manipulate
				*
				*  @return
				*    Unique (inside the entity component) class property ID the CAMP property to manipulate
				*/
				uint32 getPropertyId() const;
				void setPropertyId(uint32 propertyId);

				/**
				*  @brief
				*    Return the new camp value as string
				*/
				std::string getNewCampValueAsString() const;
				void setNewCampValueAsString(const std::string& newCampValue);

				/**
				*  @brief
				*    Return the old camp value as string
				*/
				std::string getPreviousCampValueAsString() const;
				void setPreviousCampValueAsString(const std::string& previousCampValue);

				/**
				*  @brief
				*    Return the new override state
				*/
				Object::PropertyOverrideState getNewOverrideState() const;
				void setNewOverrideState(PropertyOverrideState newOverrideState);

				/**
				*  @brief
				*    Return the old override state
				*/
				Object::PropertyOverrideState getPreviousOverrideState() const;
				void setPreviousOverrideState(PropertyOverrideState previousOverrideState);


			//[-------------------------------------------------------]
			//[ Public qsf::editor::base::Operation methods           ]
			//[-------------------------------------------------------]
			public:
				virtual uint32 getId() const override;
				virtual size_t getMemoryConsumption() const override;
				virtual void sealImpl() override;
				virtual void undoImpl() override;
				virtual void redoImpl() override;


			//[-------------------------------------------------------]
			//[ Private methods                                       ]
			//[-------------------------------------------------------]
			private:
				void overwritePropertyValue(const boost::property_tree::ptree& valueAsPTree, PropertyOverrideState overrideState = PROPERTY_INVALID);


			//[-------------------------------------------------------]
			//[ Private data                                          ]
			//[-------------------------------------------------------]
			private:
				// Property
				uint32						mPropertyId;			///< Unique (inside the entity component) class property ID the CAMP property to manipulate
				// Value
				boost::property_tree::ptree mNewCampValue;			///< New CAMP value to set as boost property tree
				boost::property_tree::ptree mPreviousCampValue;		///< Previously set CAMP value as boost property tree
				bool						mHasPreviousCampValue;	///< Simple flag telling us if we already have mPreviousCampValue or if we should get it when sealing
				// Override
				PropertyOverrideState		mNewOverrideState;		///< qsf::Object property override state to set; if PROPERTY_INVALID, it won't be touched
				PropertyOverrideState		mPreviousOverrideState;	///< Previously set property override state


			//[-------------------------------------------------------]
			//[ CAMP reflection system                                ]
			//[-------------------------------------------------------]
			QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


			};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
		} // base
	} // editor
} // qsf


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::editor::base::SetComponentPropertyOperation)
