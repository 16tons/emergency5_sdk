// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_editor_base/Export.h"

#include <qsf/reflection/object/Object.h>


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{
		namespace base
		{


			//[-------------------------------------------------------]
			//[ Classes                                               ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    Abstract operation data base class
			*/
			class QSF_EDITOR_BASE_API_EXPORT OperationData : public Object
			{


			//[-------------------------------------------------------]
			//[ Friends                                               ]
			//[-------------------------------------------------------]
			friend class CompoundOperation;	// Needs to write mOperationDataId when operation data is added


			//[-------------------------------------------------------]
			//[ Public methods                                        ]
			//[-------------------------------------------------------]
			public:
				/**
				*  @brief
				*    Destructor
				*/
				virtual ~OperationData();

				/**
				*  @brief
				*    Return operation data ID
				*/
				uint32 getOperationDataId() const;
				void setOperationDataId(uint32 operationDataId);

				/**
				*  @brief
				*    Return if the operation data is valid
				*/
				bool isValid() const;
				void setValid(bool isValid);


			//[-------------------------------------------------------]
			//[ Public virtual qsf::editor::OperationData methods     ]
			//[-------------------------------------------------------]
			public:
				/**
				*  @brief
				*    Return the unique operation identifier
				*
				*  @return
				*    The unique operation identifier
				*
				*  @note
				*    - The unique operation identifier is generated by "qsf::StringHash" by using the class name
				*      (e.g. qsf::StringHash("qsf::editor::SetComponentPropertyOperation") generating the hash value 87939205)
				*/
				virtual uint32 getId() const = 0;

				/**
				*  @brief
				*    Return the memory consumption of this operation
				*
				*  @return
				*    The memory consumption in bytes of this operation
				*
				*  @note
				*    - The memory consumption of cooperative work operations is usually lower because
				*      there's no need to store data required for undoing an operation
				*    - The default implementation returns 0
				*/
				virtual size_t getMemoryConsumption() const;


			//[-------------------------------------------------------]
			//[ Protected methods                                     ]
			//[-------------------------------------------------------]
			protected:
				/**
				*  @brief
				*    Default constructor
				*/
				OperationData();


			//[-------------------------------------------------------]
			//[ Private data                                          ]
			//[-------------------------------------------------------]
			private:
				bool   mIsValid;
				uint32 mOperationDataId;


			//[-------------------------------------------------------]
			//[ CAMP reflection system                                ]
			//[-------------------------------------------------------]
			QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


			};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
		} // base
	} // editor
} // qsf


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::editor::base::OperationData)
