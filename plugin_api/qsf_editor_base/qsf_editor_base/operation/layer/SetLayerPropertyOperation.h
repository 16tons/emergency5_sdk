// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_editor_base/operation/layer/LayerOperation.h"

#include <camp/value.hpp>

#include <boost/property_tree/ptree.hpp>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace camp
{
	class Property;
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace editor
	{
		namespace base
		{


			//[-------------------------------------------------------]
			//[ Classes                                               ]
			//[-------------------------------------------------------]
			/**
			*  @brief
			*    Set layer property operation class
			*
			*  @note
			*    - The unique class property identifier is generated by "qsf::StringHash" by using the class property name
			*      (e.g. qsf::StringHash("Position") generating the hash value 3091144222)
			*    - 64 bit are required to uniquely identify the property (layer -> property)
			*
			*  @todo
			*    - TODO(fw): This is pretty similar to "qsf::editor::base::SetComponentProprtyOperation", could we unify both?
			*/
			class QSF_EDITOR_BASE_API_EXPORT SetLayerPropertyOperation : public LayerOperation
			{


			//[-------------------------------------------------------]
			//[ Public definitions                                    ]
			//[-------------------------------------------------------]
			public:
				static const uint32 OPERATION_ID;	///< "qsf::editor::base::SetLayerPropertyOperation" unique operation ID


			//[-------------------------------------------------------]
			//[ Public methods                                        ]
			//[-------------------------------------------------------]
			public:
				SetLayerPropertyOperation();

				/**
				*  @brief
				*    Constructor
				*
				*  @param[in] layerId
				*    The unique layer identifier of the layer to change a property from
				*  @param[in] propertyId
				*    Unique (inside the layer) class property ID the CAMP property to manipulate
				*  @param[in] newCampValue
				*    New CAMP value to set
				*  @param[in] previousCampValue
				*    Optional previous CAMP value to set, if null pointer the current property value will be used
				*/
				SetLayerPropertyOperation(uint32 layerId, uint32 propertyId, const camp::Value& newCampValue, const camp::Value* previousCampValue = nullptr);

				/**
				*  @brief
				*    Destructor
				*/
				virtual ~SetLayerPropertyOperation();

				/**
				*  @brief
				*    Return the unique class property ID the CAMP property to manipulate
				*
				*  @return
				*    Unique (inside the entity component) class property ID the CAMP property to manipulate
				*/
				uint32 getPropertyId() const;
				void setPropertyId(uint32 propertyId);

				/**
				*  @brief
				*    Return the new camp value as string
				*/
				std::string getNewCampValueAsString() const;
				void setNewCampValueAsString(const std::string& newCampValue);

				/**
				*  @brief
				*    Return the old camp value as string
				*/
				std::string getPreviousCampValueAsString() const;
				void setPreviousCampValueAsString(const std::string& previousCampValue);


			//[-------------------------------------------------------]
			//[ Public qsf::editor::base::Operation methods           ]
			//[-------------------------------------------------------]
			public:
				virtual uint32 getId() const override;
				virtual size_t getMemoryConsumption() const override;
				virtual void sealImpl() override;
				virtual void undoImpl() override;
				virtual void redoImpl() override;


			//[-------------------------------------------------------]
			//[ Private data                                          ]
			//[-------------------------------------------------------]
			private:
				// Property
				uint32						mPropertyId;			///< Unique (inside the layer) class property ID the CAMP property to manipulate
				// Value
				boost::property_tree::ptree mNewCampValue;			///< New CAMP value to set as boost property tree
				boost::property_tree::ptree mPreviousCampValue;		///< Previously set CAMP value as boost property tree
				bool						mHasPreviousCampValue;	///< Simple flag telling us if we already have mPreviousCampValue or if we should get it when sealing


			//[-------------------------------------------------------]
			//[ CAMP reflection system                                ]
			//[-------------------------------------------------------]
			QSF_CAMP_RTTI()	// Only adds the virtual method "campClassId()", nothing more


			};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
		} // base
	} // editor
} // qsf


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::editor::base::SetLayerPropertyOperation)
