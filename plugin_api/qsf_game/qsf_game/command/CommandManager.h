// Copyright (C) 2012-2018 Promotion Software GmbH


//[-------------------------------------------------------]
//[ Header guard                                          ]
//[-------------------------------------------------------]
#pragma once


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
#include "qsf_game/Export.h"

#include <qsf/plugin/pluginable/PluginableManager.h>


//[-------------------------------------------------------]
//[ Forward declarations                                  ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace game
	{
		class Command;
	}
}


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
namespace qsf
{
	namespace game
	{


		//[-------------------------------------------------------]
		//[ Classes                                               ]
		//[-------------------------------------------------------]
		/**
		*  @brief
		*    Command manager implementation
		*
		*  @remarks
		*    The command manager is automatically able to use all CAMP classes which are derived from "qsf::game::Command".
		*/
		class QSF_GAME_API_EXPORT CommandManager : public PluginableManager
		{


		//[-------------------------------------------------------]
		//[ Public methods                                        ]
		//[-------------------------------------------------------]
		public:
			/**
			*  @brief
			*    Default constructor
			*/
			CommandManager();

			/**
			*  @brief
			*    Destructor
			*/
			virtual ~CommandManager();

			/**
			*  @brief
			*    Scan the asset system an register all script commands
			*
			*  @note
			*    - Not automatically called in constructor, in the moment the command manager is created, the script assets aren't loaded
			*/
			void registerScriptCommands();

			/**
			*  @brief
			*    Reload all registered scripts
			*/
			void reloadScriptCommands();

			/**
			*  @brief
			*    Return a pointer to a command instance by using its unique identifier
			*
			*  @param[in] id
			*    The unique command identifier generated by "qsf::StringHash"
			*
			*  @return
			*    The requested command instance, null pointer on error, do no destroy the returned instance
			*/
			template <typename T> T* getCommandById(const StringHash& id) const;

			/**
			*  @brief
			*    Adds an replacement information for an command
			*
			*  @param[in] id
			*    The unique command identifier generated by "qsf::StringHash" for the command for which an replacement should be registered
			*  @param[in] replacementId
			*    The unique command identifier generated by "qsf::StringHash" for the replacement command
			*/
			void registerReplacementCommand(const StringHash& id, const StringHash& replacementId);


		//[-------------------------------------------------------]
		//[ Protected virtual qsf::PluginableManager methods      ]
		//[-------------------------------------------------------]
		protected:
			virtual void classAdded(const camp::Class& added) override;
			virtual void createPluginableInstance(const camp::Class& added, camp::UserObject& campUserObject) override;


		//[-------------------------------------------------------]
		//[ Private methods                                       ]
		//[-------------------------------------------------------]
		private:
			Command* internalGetCommandById(const StringHash& id) const;


		//[-------------------------------------------------------]
		//[ Private data                                          ]
		//[-------------------------------------------------------]
		private:
			std::unordered_map<uint32, uint32> mCommandReplacementMap; // Holds a map to replace a command with a different one


		};


//[-------------------------------------------------------]
//[ Namespace                                             ]
//[-------------------------------------------------------]
	} // game
} // qsf


//[-------------------------------------------------------]
//[ CAMP reflection system                                ]
//[-------------------------------------------------------]
QSF_CAMP_TYPE_NONCOPYABLE(qsf::game::CommandManager)


//[-------------------------------------------------------]
//[ Implementation                                        ]
//[-------------------------------------------------------]
#include "qsf_game/command/CommandManager-inl.h"
